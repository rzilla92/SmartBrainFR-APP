import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module) {
    "use strict";
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module) {
    module.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/clarifai/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/clarifai/dist/helpers.js"(exports, module) {
    "use strict";
    var SUCCESS_CODES = [200, 201];
    module.exports = {
      isSuccess: function isSuccess2(response) {
        return SUCCESS_CODES.indexOf(response.status) > -1;
      },
      deleteEmpty: function deleteEmpty(obj) {
        var strict = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        Object.keys(obj).forEach(function(key) {
          if (obj[key] === null || obj[key] === void 0 || strict === true && (obj[key] === "" || obj[key].length === 0 || Object.keys(obj[key]).length === 0)) {
            delete obj[key];
          }
        });
      },
      clone: function clone(obj) {
        var keys = Object.keys(obj);
        var copy = {};
        keys.forEach(function(k) {
          copy[k] = obj[k];
        });
        return copy;
      },
      checkType: function checkType(regex, val) {
        if (regex instanceof RegExp === false) {
          regex = new RegExp(regex);
        }
        return regex.test(Object.prototype.toString.call(val));
      }
    };
  }
});

// node_modules/asap/browser-raw.js
var require_browser_raw = __commonJS({
  "node_modules/asap/browser-raw.js"(exports, module) {
    "use strict";
    module.exports = rawAsap;
    function rawAsap(task) {
      if (!queue.length) {
        requestFlush();
        flushing = true;
      }
      queue[queue.length] = task;
    }
    var queue = [];
    var flushing = false;
    var requestFlush;
    var index = 0;
    var capacity = 1024;
    function flush() {
      while (index < queue.length) {
        var currentIndex = index;
        index = index + 1;
        queue[currentIndex].call();
        if (index > capacity) {
          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
            queue[scan] = queue[scan + index];
          }
          queue.length -= index;
          index = 0;
        }
      }
      queue.length = 0;
      index = 0;
      flushing = false;
    }
    var scope = typeof global !== "undefined" ? global : self;
    var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
    if (typeof BrowserMutationObserver === "function") {
      requestFlush = makeRequestCallFromMutationObserver(flush);
    } else {
      requestFlush = makeRequestCallFromTimer(flush);
    }
    rawAsap.requestFlush = requestFlush;
    function makeRequestCallFromMutationObserver(callback) {
      var toggle = 1;
      var observer = new BrowserMutationObserver(callback);
      var node = document.createTextNode("");
      observer.observe(node, { characterData: true });
      return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
      };
    }
    function makeRequestCallFromTimer(callback) {
      return function requestCall() {
        var timeoutHandle = setTimeout(handleTimer, 0);
        var intervalHandle = setInterval(handleTimer, 50);
        function handleTimer() {
          clearTimeout(timeoutHandle);
          clearInterval(intervalHandle);
          callback();
        }
      };
    }
    rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
  }
});

// node_modules/promise/lib/core.js
var require_core = __commonJS({
  "node_modules/promise/lib/core.js"(exports, module) {
    "use strict";
    var asap = require_browser_raw();
    function noop() {
    }
    var LAST_ERROR = null;
    var IS_ERROR = {};
    function getThen(obj) {
      try {
        return obj.then;
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    function tryCallOne(fn, a) {
      try {
        return fn(a);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    function tryCallTwo(fn, a, b) {
      try {
        fn(a, b);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    module.exports = Promise2;
    function Promise2(fn) {
      if (typeof this !== "object") {
        throw new TypeError("Promises must be constructed via new");
      }
      if (typeof fn !== "function") {
        throw new TypeError("Promise constructor's argument is not a function");
      }
      this._40 = 0;
      this._65 = 0;
      this._55 = null;
      this._72 = null;
      if (fn === noop)
        return;
      doResolve(fn, this);
    }
    Promise2._37 = null;
    Promise2._87 = null;
    Promise2._61 = noop;
    Promise2.prototype.then = function(onFulfilled, onRejected) {
      if (this.constructor !== Promise2) {
        return safeThen(this, onFulfilled, onRejected);
      }
      var res = new Promise2(noop);
      handle(this, new Handler(onFulfilled, onRejected, res));
      return res;
    };
    function safeThen(self2, onFulfilled, onRejected) {
      return new self2.constructor(function(resolve2, reject2) {
        var res = new Promise2(noop);
        res.then(resolve2, reject2);
        handle(self2, new Handler(onFulfilled, onRejected, res));
      });
    }
    function handle(self2, deferred) {
      while (self2._65 === 3) {
        self2 = self2._55;
      }
      if (Promise2._37) {
        Promise2._37(self2);
      }
      if (self2._65 === 0) {
        if (self2._40 === 0) {
          self2._40 = 1;
          self2._72 = deferred;
          return;
        }
        if (self2._40 === 1) {
          self2._40 = 2;
          self2._72 = [self2._72, deferred];
          return;
        }
        self2._72.push(deferred);
        return;
      }
      handleResolved(self2, deferred);
    }
    function handleResolved(self2, deferred) {
      asap(function() {
        var cb = self2._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
          if (self2._65 === 1) {
            resolve(deferred.promise, self2._55);
          } else {
            reject(deferred.promise, self2._55);
          }
          return;
        }
        var ret = tryCallOne(cb, self2._55);
        if (ret === IS_ERROR) {
          reject(deferred.promise, LAST_ERROR);
        } else {
          resolve(deferred.promise, ret);
        }
      });
    }
    function resolve(self2, newValue) {
      if (newValue === self2) {
        return reject(
          self2,
          new TypeError("A promise cannot be resolved with itself.")
        );
      }
      if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
          return reject(self2, LAST_ERROR);
        }
        if (then === self2.then && newValue instanceof Promise2) {
          self2._65 = 3;
          self2._55 = newValue;
          finale(self2);
          return;
        } else if (typeof then === "function") {
          doResolve(then.bind(newValue), self2);
          return;
        }
      }
      self2._65 = 1;
      self2._55 = newValue;
      finale(self2);
    }
    function reject(self2, newValue) {
      self2._65 = 2;
      self2._55 = newValue;
      if (Promise2._87) {
        Promise2._87(self2, newValue);
      }
      finale(self2);
    }
    function finale(self2) {
      if (self2._40 === 1) {
        handle(self2, self2._72);
        self2._72 = null;
      }
      if (self2._40 === 2) {
        for (var i = 0; i < self2._72.length; i++) {
          handle(self2, self2._72[i]);
        }
        self2._72 = null;
      }
    }
    function Handler(onFulfilled, onRejected, promise) {
      this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
      this.onRejected = typeof onRejected === "function" ? onRejected : null;
      this.promise = promise;
    }
    function doResolve(fn, promise) {
      var done = false;
      var res = tryCallTwo(fn, function(value) {
        if (done)
          return;
        done = true;
        resolve(promise, value);
      }, function(reason) {
        if (done)
          return;
        done = true;
        reject(promise, reason);
      });
      if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
      }
    }
  }
});

// node_modules/promise/lib/done.js
var require_done = __commonJS({
  "node_modules/promise/lib/done.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.prototype.done = function(onFulfilled, onRejected) {
      var self2 = arguments.length ? this.then.apply(this, arguments) : this;
      self2.then(null, function(err) {
        setTimeout(function() {
          throw err;
        }, 0);
      });
    };
  }
});

// node_modules/promise/lib/finally.js
var require_finally = __commonJS({
  "node_modules/promise/lib/finally.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.prototype["finally"] = function(f) {
      return this.then(function(value) {
        return Promise2.resolve(f()).then(function() {
          return value;
        });
      }, function(err) {
        return Promise2.resolve(f()).then(function() {
          throw err;
        });
      });
    };
  }
});

// node_modules/promise/lib/es6-extensions.js
var require_es6_extensions = __commonJS({
  "node_modules/promise/lib/es6-extensions.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    var TRUE = valuePromise(true);
    var FALSE = valuePromise(false);
    var NULL = valuePromise(null);
    var UNDEFINED = valuePromise(void 0);
    var ZERO = valuePromise(0);
    var EMPTYSTRING = valuePromise("");
    function valuePromise(value) {
      var p = new Promise2(Promise2._61);
      p._65 = 1;
      p._55 = value;
      return p;
    }
    Promise2.resolve = function(value) {
      if (value instanceof Promise2)
        return value;
      if (value === null)
        return NULL;
      if (value === void 0)
        return UNDEFINED;
      if (value === true)
        return TRUE;
      if (value === false)
        return FALSE;
      if (value === 0)
        return ZERO;
      if (value === "")
        return EMPTYSTRING;
      if (typeof value === "object" || typeof value === "function") {
        try {
          var then = value.then;
          if (typeof then === "function") {
            return new Promise2(then.bind(value));
          }
        } catch (ex) {
          return new Promise2(function(resolve, reject) {
            reject(ex);
          });
        }
      }
      return valuePromise(value);
    };
    Promise2.all = function(arr) {
      var args = Array.prototype.slice.call(arr);
      return new Promise2(function(resolve, reject) {
        if (args.length === 0)
          return resolve([]);
        var remaining = args.length;
        function res(i2, val) {
          if (val && (typeof val === "object" || typeof val === "function")) {
            if (val instanceof Promise2 && val.then === Promise2.prototype.then) {
              while (val._65 === 3) {
                val = val._55;
              }
              if (val._65 === 1)
                return res(i2, val._55);
              if (val._65 === 2)
                reject(val._55);
              val.then(function(val2) {
                res(i2, val2);
              }, reject);
              return;
            } else {
              var then = val.then;
              if (typeof then === "function") {
                var p = new Promise2(then.bind(val));
                p.then(function(val2) {
                  res(i2, val2);
                }, reject);
                return;
              }
            }
          }
          args[i2] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        }
        for (var i = 0; i < args.length; i++) {
          res(i, args[i]);
        }
      });
    };
    Promise2.reject = function(value) {
      return new Promise2(function(resolve, reject) {
        reject(value);
      });
    };
    Promise2.race = function(values) {
      return new Promise2(function(resolve, reject) {
        values.forEach(function(value) {
          Promise2.resolve(value).then(resolve, reject);
        });
      });
    };
    Promise2.prototype["catch"] = function(onRejected) {
      return this.then(null, onRejected);
    };
  }
});

// node_modules/asap/browser-asap.js
var require_browser_asap = __commonJS({
  "node_modules/asap/browser-asap.js"(exports, module) {
    "use strict";
    var rawAsap = require_browser_raw();
    var freeTasks = [];
    var pendingErrors = [];
    var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
    function throwFirstError() {
      if (pendingErrors.length) {
        throw pendingErrors.shift();
      }
    }
    module.exports = asap;
    function asap(task) {
      var rawTask;
      if (freeTasks.length) {
        rawTask = freeTasks.pop();
      } else {
        rawTask = new RawTask();
      }
      rawTask.task = task;
      rawAsap(rawTask);
    }
    function RawTask() {
      this.task = null;
    }
    RawTask.prototype.call = function() {
      try {
        this.task.call();
      } catch (error) {
        if (asap.onerror) {
          asap.onerror(error);
        } else {
          pendingErrors.push(error);
          requestErrorThrow();
        }
      } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
      }
    };
  }
});

// node_modules/promise/lib/node-extensions.js
var require_node_extensions = __commonJS({
  "node_modules/promise/lib/node-extensions.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    var asap = require_browser_asap();
    module.exports = Promise2;
    Promise2.denodeify = function(fn, argumentCount) {
      if (typeof argumentCount === "number" && argumentCount !== Infinity) {
        return denodeifyWithCount(fn, argumentCount);
      } else {
        return denodeifyWithoutCount(fn);
      }
    };
    var callbackFn = "function (err, res) {if (err) { rj(err); } else { rs(res); }}";
    function denodeifyWithCount(fn, argumentCount) {
      var args = [];
      for (var i = 0; i < argumentCount; i++) {
        args.push("a" + i);
      }
      var body = [
        "return function (" + args.join(",") + ") {",
        "var self = this;",
        "return new Promise(function (rs, rj) {",
        "var res = fn.call(",
        ["self"].concat(args).concat([callbackFn]).join(","),
        ");",
        "if (res &&",
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ") {rs(res);}",
        "});",
        "};"
      ].join("");
      return Function(["Promise", "fn"], body)(Promise2, fn);
    }
    function denodeifyWithoutCount(fn) {
      var fnLength = Math.max(fn.length - 1, 3);
      var args = [];
      for (var i = 0; i < fnLength; i++) {
        args.push("a" + i);
      }
      var body = [
        "return function (" + args.join(",") + ") {",
        "var self = this;",
        "var args;",
        "var argLength = arguments.length;",
        "if (arguments.length > " + fnLength + ") {",
        "args = new Array(arguments.length + 1);",
        "for (var i = 0; i < arguments.length; i++) {",
        "args[i] = arguments[i];",
        "}",
        "}",
        "return new Promise(function (rs, rj) {",
        "var cb = " + callbackFn + ";",
        "var res;",
        "switch (argLength) {",
        args.concat(["extra"]).map(function(_, index) {
          return "case " + index + ":res = fn.call(" + ["self"].concat(args.slice(0, index)).concat("cb").join(",") + ");break;";
        }).join(""),
        "default:",
        "args[argLength] = cb;",
        "res = fn.apply(self, args);",
        "}",
        "if (res &&",
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ") {rs(res);}",
        "});",
        "};"
      ].join("");
      return Function(
        ["Promise", "fn"],
        body
      )(Promise2, fn);
    }
    Promise2.nodeify = function(fn) {
      return function() {
        var args = Array.prototype.slice.call(arguments);
        var callback = typeof args[args.length - 1] === "function" ? args.pop() : null;
        var ctx = this;
        try {
          return fn.apply(this, arguments).nodeify(callback, ctx);
        } catch (ex) {
          if (callback === null || typeof callback == "undefined") {
            return new Promise2(function(resolve, reject) {
              reject(ex);
            });
          } else {
            asap(function() {
              callback.call(ctx, ex);
            });
          }
        }
      };
    };
    Promise2.prototype.nodeify = function(callback, ctx) {
      if (typeof callback != "function")
        return this;
      this.then(function(value) {
        asap(function() {
          callback.call(ctx, null, value);
        });
      }, function(err) {
        asap(function() {
          callback.call(ctx, err);
        });
      });
    };
  }
});

// node_modules/promise/lib/synchronous.js
var require_synchronous = __commonJS({
  "node_modules/promise/lib/synchronous.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.enableSynchronous = function() {
      Promise2.prototype.isPending = function() {
        return this.getState() == 0;
      };
      Promise2.prototype.isFulfilled = function() {
        return this.getState() == 1;
      };
      Promise2.prototype.isRejected = function() {
        return this.getState() == 2;
      };
      Promise2.prototype.getValue = function() {
        if (this._65 === 3) {
          return this._55.getValue();
        }
        if (!this.isFulfilled()) {
          throw new Error("Cannot get a value of an unfulfilled promise.");
        }
        return this._55;
      };
      Promise2.prototype.getReason = function() {
        if (this._65 === 3) {
          return this._55.getReason();
        }
        if (!this.isRejected()) {
          throw new Error("Cannot get a rejection reason of a non-rejected promise.");
        }
        return this._55;
      };
      Promise2.prototype.getState = function() {
        if (this._65 === 3) {
          return this._55.getState();
        }
        if (this._65 === -1 || this._65 === -2) {
          return 0;
        }
        return this._65;
      };
    };
    Promise2.disableSynchronous = function() {
      Promise2.prototype.isPending = void 0;
      Promise2.prototype.isFulfilled = void 0;
      Promise2.prototype.isRejected = void 0;
      Promise2.prototype.getValue = void 0;
      Promise2.prototype.getReason = void 0;
      Promise2.prototype.getState = void 0;
    };
  }
});

// node_modules/promise/lib/index.js
var require_lib = __commonJS({
  "node_modules/promise/lib/index.js"(exports, module) {
    "use strict";
    module.exports = require_core();
    require_done();
    require_finally();
    require_es6_extensions();
    require_node_extensions();
    require_synchronous();
  }
});

// node_modules/promise/index.js
var require_promise = __commonJS({
  "node_modules/promise/index.js"(exports, module) {
    "use strict";
    module.exports = require_lib();
  }
});

// node_modules/clarifai/dist/ModelVersion.js
var require_ModelVersion = __commonJS({
  "node_modules/clarifai/dist/ModelVersion.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var ModelVersion = function ModelVersion2(_config, data) {
      _classCallCheck(this, ModelVersion2);
      this.id = data.id;
      this.created_at = this.createdAt = data.created_at || data.createdAt;
      this.status = data.status;
      this.active_concept_count = data.active_concept_count;
      this.metrics = data.metrics;
      this._config = _config;
      this.rawData = data;
    };
    module.exports = ModelVersion;
  }
});

// node_modules/clarifai/dist/constants.js
var require_constants = __commonJS({
  "node_modules/clarifai/dist/constants.js"(exports, module) {
    "use strict";
    var MAX_BATCH_SIZE = 128;
    var GEO_LIMIT_TYPES = ["withinMiles", "withinKilometers", "withinRadians", "withinDegrees"];
    var SYNC_TIMEOUT = 36e4;
    var MODEL_QUEUED_FOR_TRAINING = "21103";
    var MODEL_TRAINING = "21101";
    var POLLTIME = 2e3;
    module.exports = {
      API: {
        TOKEN_PATH: "/token",
        MODELS_PATH: "/models",
        MODEL_PATH: "/models/$0",
        MODEL_VERSIONS_PATH: "/models/$0/versions",
        MODEL_VERSION_PATH: "/models/$0/versions/$1",
        MODEL_PATCH_PATH: "/models/$0/output_info/data/concepts",
        MODEL_OUTPUT_PATH: "/models/$0/output_info",
        MODEL_VERSION_OUTPUT_PATH: "/models/$0/versions/$1/output_info",
        MODEL_SEARCH_PATH: "/models/searches",
        MODEL_FEEDBACK_PATH: "/models/$0/feedback",
        MODEL_VERSION_FEEDBACK_PATH: "/models/$0/versions/$1/feedback",
        PREDICT_PATH: "/models/$0/outputs",
        VERSION_PREDICT_PATH: "/models/$0/versions/$1/outputs",
        CONCEPTS_PATH: "/concepts",
        CONCEPT_PATH: "/concepts/$0",
        CONCEPT_SEARCH_PATH: "/concepts/searches",
        MODEL_INPUTS_PATH: "/models/$0/inputs",
        MODEL_VERSION_INPUTS_PATH: "/models/$0/versions/$1/inputs",
        MODEL_VERSION_METRICS_PATH: "/models/$0/versions/$1/metrics",
        INPUTS_PATH: "/inputs",
        INPUT_PATH: "/inputs/$0",
        INPUTS_STATUS_PATH: "/inputs/status",
        SEARCH_PATH: "/searches",
        SEARCH_FEEDBACK_PATH: "/searches/feedback",
        WORKFLOWS_PATH: "/workflows",
        WORKFLOW_PATH: "/workflows/$0",
        WORKFLOW_RESULTS_PATH: "/workflows/$0/results"
      },
      ERRORS: {
        paramsRequired: function paramsRequired(param) {
          var paramList = Array.isArray(param) ? param : [param];
          return new Error("The following " + (paramList.length > 1 ? "params are" : "param is") + " required: " + paramList.join(", "));
        },
        MAX_INPUTS: new Error("Number of inputs passed exceeded max of " + MAX_BATCH_SIZE),
        INVALID_GEOLIMIT_TYPE: new Error("Incorrect geo_limit type. Value must be any of the following: " + GEO_LIMIT_TYPES.join(", ")),
        INVALID_DELETE_ARGS: new Error("Wrong arguments passed. You can only delete all models (provide no arguments), delete select models (provide list of ids),\n    delete a single model (providing a single id) or delete a model version (provide a single id and version id)")
      },
      STATUS: {
        MODEL_QUEUED_FOR_TRAINING,
        MODEL_TRAINING
      },
      replaceVars: function replaceVars(path) {
        var vars = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var newPath = path;
        vars.forEach(function(val, index) {
          if (index === 0) {
            val = encodeURIComponent(val);
          }
          newPath = newPath.replace(new RegExp("\\$" + index, "g"), val);
        });
        return newPath;
      },
      getBasePath: function getBasePath() {
        var apiEndpoint = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "https://api.clarifai.com";
        var userId = arguments[1];
        var appId = arguments[2];
        if (!userId || !appId) {
          return apiEndpoint + "/v2";
        }
        return apiEndpoint + "/v2/users/" + userId + "/apps/" + appId;
      },
      GEO_LIMIT_TYPES,
      MAX_BATCH_SIZE,
      SYNC_TIMEOUT,
      POLLTIME
    };
  }
});

// node_modules/valid-url/index.js
var require_valid_url = __commonJS({
  "node_modules/valid-url/index.js"(exports, module) {
    (function(module2) {
      "use strict";
      module2.exports.is_uri = is_iri;
      module2.exports.is_http_uri = is_http_iri;
      module2.exports.is_https_uri = is_https_iri;
      module2.exports.is_web_uri = is_web_iri;
      module2.exports.isUri = is_iri;
      module2.exports.isHttpUri = is_http_iri;
      module2.exports.isHttpsUri = is_https_iri;
      module2.exports.isWebUri = is_web_iri;
      var splitUri = function(uri) {
        var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
        return splitted;
      };
      function is_iri(value) {
        if (!value) {
          return;
        }
        if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value))
          return;
        if (/%[^0-9a-f]/i.test(value))
          return;
        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value))
          return;
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!(scheme && scheme.length && path.length >= 0))
          return;
        if (authority && authority.length) {
          if (!(path.length === 0 || /^\//.test(path)))
            return;
        } else {
          if (/^\/\//.test(path))
            return;
        }
        if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))
          return;
        out += scheme + ":";
        if (authority && authority.length) {
          out += "//" + authority;
        }
        out += path;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_http_iri(value, allowHttps) {
        if (!is_iri(value)) {
          return;
        }
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path = "";
        var port = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!scheme)
          return;
        if (allowHttps) {
          if (scheme.toLowerCase() != "https")
            return;
        } else {
          if (scheme.toLowerCase() != "http")
            return;
        }
        if (!authority) {
          return;
        }
        if (/:(\d+)$/.test(authority)) {
          port = authority.match(/:(\d+)$/)[0];
          authority = authority.replace(/:\d+$/, "");
        }
        out += scheme + ":";
        out += "//" + authority;
        if (port) {
          out += port;
        }
        out += path;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_https_iri(value) {
        return is_http_iri(value, true);
      }
      function is_web_iri(value) {
        return is_http_iri(value) || is_https_iri(value);
      }
    })(module);
  }
});

// node_modules/clarifai/package.json
var require_package = __commonJS({
  "node_modules/clarifai/package.json"(exports, module) {
    module.exports = {
      name: "clarifai",
      version: "2.9.1",
      description: "Official Clarifai Javascript SDK",
      main: "dist/index.js",
      repository: "https://github.com/Clarifai/clarifai-javascript",
      author: "Clarifai Inc.",
      license: "Apache-2.0",
      scripts: {
        jsdoc: "jsdoc src/* -t node_modules/minami -d docs/$npm_package_version && jsdoc src/* -t node_modules/minami -d docs/latest",
        test: "gulp test",
        unittest: "gulp unittest",
        watch: "gulp watch",
        build: "npm run clean && gulp build && npm run jsdoc",
        release: "release-it",
        clean: "gulp cleanbuild"
      },
      dependencies: {
        axios: ">=0.11.1 <2",
        promise: "^7.1.1",
        "valid-url": "^1.0.9"
      },
      devDependencies: {
        "axios-mock-adapter": "^1.16.0",
        "babel-eslint": "^6.1.2",
        "babel-preset-es2015": "^6.14.0",
        "babel-register": "^6.14.0",
        babelify: "^7.3.0",
        del: "^2.0.2",
        envify: "^3.4.0",
        gulp: "^3.9.1",
        "gulp-babel": "^6.1.2",
        "gulp-browserify": "^0.5.1",
        "gulp-eslint": "^2.0.0",
        "gulp-insert": "^0.5.0",
        "gulp-jasmine": "^4.0.0",
        "gulp-notify": "2.2.0",
        "gulp-rename": "^1.2.2",
        "gulp-replace-task": "^0.11.0",
        "gulp-uglify": "^1.4.1",
        "gulp-util": "^3.0.6",
        jsdoc: "^3.4.1",
        minami: "^1.1.1",
        "release-it": "^2.9.0"
      }
    };
  }
});

// node_modules/clarifai/dist/utils.js
var require_utils2 = __commonJS({
  "node_modules/clarifai/dist/utils.js"(exports, module) {
    "use strict";
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Promise2 = require_promise();
    var validUrl = require_valid_url();
    var _require = require_constants();
    var GEO_LIMIT_TYPES = _require.GEO_LIMIT_TYPES;
    var ERRORS = _require.ERRORS;
    var _require2 = require_helpers();
    var checkType = _require2.checkType;
    var clone = _require2.clone;
    var _require3 = require_package();
    var VERSION = _require3.version;
    module.exports = {
      wrapToken: function wrapToken2(_config, requestFn) {
        return new Promise2(function(resolve, reject) {
          if (_config.apiKey) {
            var headers = {
              Authorization: "Key " + _config.apiKey,
              "X-Clarifai-Client": "js:" + VERSION
            };
            return requestFn(headers).then(resolve, reject);
          }
          if (_config.sessionToken) {
            var _headers = {
              "X-Clarifai-Session-Token": _config.sessionToken,
              "X-Clarifai-Client": "js:" + VERSION
            };
            return requestFn(_headers).then(resolve, reject);
          }
          _config.token().then(function(token) {
            var headers2 = {
              Authorization: "Bearer " + token.accessToken,
              "X-Clarifai-Client": "js:" + VERSION
            };
            requestFn(headers2).then(resolve, reject);
          }, reject);
        });
      },
      formatModel: function formatModel() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var formatted = {};
        if (data.id === null || data.id === void 0) {
          throw ERRORS.paramsRequired("Model ID");
        }
        formatted.id = data.id;
        if (data.name) {
          formatted.name = data.name;
        }
        formatted.output_info = {};
        if (data.conceptsMutuallyExclusive !== void 0) {
          formatted.output_info.output_config = formatted.output_info.output_config || {};
          formatted.output_info.output_config.concepts_mutually_exclusive = !!data.conceptsMutuallyExclusive;
        }
        if (data.closedEnvironment !== void 0) {
          formatted.output_info.output_config = formatted.output_info.output_config || {};
          formatted.output_info.output_config.closed_environment = !!data.closedEnvironment;
        }
        if (data.concepts) {
          formatted.output_info.data = {
            concepts: data.concepts.map(module.exports.formatConcept)
          };
        }
        return formatted;
      },
      formatInput: function formatInput(data, includeImage) {
        var input = checkType(/String/, data) ? { url: data } : data;
        var formatted = {
          id: input.id || null,
          data: {}
        };
        if (input.concepts) {
          formatted.data.concepts = input.concepts;
        }
        if (input.metadata) {
          formatted.data.metadata = input.metadata;
        }
        if (input.geo) {
          formatted.data.geo = { geo_point: input.geo };
        }
        if (input.regions) {
          formatted.data.regions = input.regions;
        }
        if (includeImage !== false) {
          formatted.data.image = {
            url: input.url,
            base64: input.base64,
            crop: input.crop
          };
          if (data.allowDuplicateUrl) {
            formatted.data.image.allow_duplicate_url = true;
          }
        }
        return formatted;
      },
      formatMediaPredict: function formatMediaPredict(data) {
        var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "image";
        var media = void 0;
        if (checkType(/String/, data)) {
          if (validUrl.isWebUri(data)) {
            media = {
              url: data
            };
          } else {
            media = {
              base64: data
            };
          }
        } else {
          media = Object.assign({}, data);
        }
        var id = void 0;
        if (media.id) {
          id = media.id;
          delete media.id;
        }
        var object = {
          data: _defineProperty({}, type, media)
        };
        if (id) {
          object.id = id;
        }
        return object;
      },
      formatImagesSearch: function formatImagesSearch(image) {
        var imageQuery = void 0;
        var input = { input: { data: {} } };
        var formatted = [];
        if (checkType(/String/, image)) {
          imageQuery = { url: image };
        } else {
          imageQuery = image.url || image.base64 ? {
            image: {
              url: image.url,
              base64: image.base64,
              crop: image.crop
            }
          } : {};
        }
        input.input.data = imageQuery;
        if (image.id) {
          input.input.id = image.id;
          input.input.data = { image: {} };
          if (image.crop) {
            input.input.data.image.crop = image.crop;
          }
        }
        if (image.metadata !== void 0) {
          input.input.data.metadata = image.metadata;
        }
        if (image.geo !== void 0) {
          if (checkType(/Array/, image.geo)) {
            input.input.data.geo = {
              geo_box: image.geo.map(function(p) {
                return { geo_point: p };
              })
            };
          } else if (checkType(/Object/, image.geo)) {
            if (GEO_LIMIT_TYPES.indexOf(image.geo.type) === -1) {
              throw ERRORS.INVALID_GEOLIMIT_TYPE;
            }
            input.input.data.geo = {
              geo_point: {
                latitude: image.geo.latitude,
                longitude: image.geo.longitude
              },
              geo_limit: {
                type: image.geo.type,
                value: image.geo.value
              }
            };
          }
        }
        if (image.type !== "input" && input.input.data.image) {
          if (input.input.data.metadata || input.input.data.geo) {
            var dataCopy = { input: { data: clone(input.input.data) } };
            var imageCopy = { input: { data: clone(input.input.data) } };
            delete dataCopy.input.data.image;
            delete imageCopy.input.data.metadata;
            delete imageCopy.input.data.geo;
            input = [{ output: imageCopy }, dataCopy];
          } else {
            input = [{ output: input }];
          }
        }
        formatted = formatted.concat(input);
        return formatted;
      },
      formatConcept: function formatConcept(concept) {
        var formatted = concept;
        if (checkType(/String/, concept)) {
          formatted = {
            id: concept
          };
        }
        return formatted;
      },
      formatConceptsSearch: function formatConceptsSearch(query) {
        if (checkType(/String/, query)) {
          query = { id: query };
        }
        var v = {};
        var type = query.type === "input" ? "input" : "output";
        delete query.type;
        v[type] = {
          data: {
            concepts: [query]
          }
        };
        return v;
      },
      formatObjectForSnakeCase: function formatObjectForSnakeCase(obj) {
        return Object.keys(obj).reduce(function(o, k) {
          o[k.replace(/([A-Z])/g, function(r) {
            return "_" + r.toLowerCase();
          })] = obj[k];
          return o;
        }, {});
      }
    };
  }
});

// node_modules/clarifai/dist/Model.js
var require_Model = __commonJS({
  "node_modules/clarifai/dist/Model.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var ModelVersion = require_ModelVersion();
    var _require = require_helpers();
    var isSuccess2 = _require.isSuccess;
    var checkType = _require.checkType;
    var clone = _require.clone;
    var _require2 = require_constants();
    var API = _require2.API;
    var SYNC_TIMEOUT = _require2.SYNC_TIMEOUT;
    var replaceVars = _require2.replaceVars;
    var STATUS = _require2.STATUS;
    var POLLTIME = _require2.POLLTIME;
    var MODEL_QUEUED_FOR_TRAINING = STATUS.MODEL_QUEUED_FOR_TRAINING;
    var MODEL_TRAINING = STATUS.MODEL_TRAINING;
    var _require3 = require_utils2();
    var wrapToken2 = _require3.wrapToken;
    var formatMediaPredict = _require3.formatMediaPredict;
    var formatModel = _require3.formatModel;
    var formatObjectForSnakeCase = _require3.formatObjectForSnakeCase;
    var MODEL_VERSIONS_PATH = API.MODEL_VERSIONS_PATH;
    var MODEL_VERSION_PATH = API.MODEL_VERSION_PATH;
    var MODELS_PATH = API.MODELS_PATH;
    var MODEL_FEEDBACK_PATH = API.MODEL_FEEDBACK_PATH;
    var MODEL_VERSION_FEEDBACK_PATH = API.MODEL_VERSION_FEEDBACK_PATH;
    var PREDICT_PATH = API.PREDICT_PATH;
    var VERSION_PREDICT_PATH = API.VERSION_PREDICT_PATH;
    var MODEL_INPUTS_PATH = API.MODEL_INPUTS_PATH;
    var MODEL_VERSION_OUTPUT_PATH = API.MODEL_VERSION_OUTPUT_PATH;
    var MODEL_OUTPUT_PATH = API.MODEL_OUTPUT_PATH;
    var MODEL_VERSION_INPUTS_PATH = API.MODEL_VERSION_INPUTS_PATH;
    var MODEL_VERSION_METRICS_PATH = API.MODEL_VERSION_METRICS_PATH;
    var Model = function() {
      function Model2(_config, data) {
        _classCallCheck(this, Model2);
        this._config = _config;
        this.name = data.name;
        this.id = data.id;
        this.createdAt = data.created_at || data.createdAt;
        this.appId = data.app_id || data.appId;
        this.outputInfo = data.output_info || data.outputInfo;
        if (checkType(/(String)/, data.version)) {
          this.modelVersion = {};
          this.versionId = data.version;
        } else {
          if (data.model_version || data.modelVersion || data.version) {
            this.modelVersion = new ModelVersion(this._config, data.model_version || data.modelVersion || data.version);
          }
          this.versionId = (this.modelVersion || {}).id;
        }
        this.rawData = data;
      }
      _createClass(Model2, [{
        key: "mergeConcepts",
        value: function mergeConcepts() {
          var concepts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];
          return this.update({ action: "merge", concepts: conceptsArr });
        }
      }, {
        key: "deleteConcepts",
        value: function deleteConcepts() {
          var concepts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];
          return this.update({ action: "remove", concepts: conceptsArr });
        }
      }, {
        key: "overwriteConcepts",
        value: function overwriteConcepts() {
          var concepts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];
          return this.update({ action: "overwrite", concepts: conceptsArr });
        }
      }, {
        key: "runModelEval",
        value: function runModelEval() {
          var _this = this;
          var url = "" + this._config.basePath + replaceVars(MODEL_VERSION_METRICS_PATH, [this.id, this.versionId]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, {}, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new ModelVersion(_this._config, response.data.model_version));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "update",
        value: function update(obj) {
          var _this2 = this;
          var url = "" + this._config.basePath + MODELS_PATH;
          var modelData = [obj];
          var data = { models: modelData.map(function(m) {
            return formatModel(Object.assign(m, { id: _this2.id }));
          }) };
          if (Array.isArray(obj.concepts)) {
            data["action"] = obj.action || "merge";
          }
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.patch(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Model2(_this2._config, response.data.models[0]));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "train",
        value: function train(sync) {
          var _this3 = this;
          var url = "" + this._config.basePath + replaceVars(MODEL_VERSIONS_PATH, [this.id]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, null, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  _this3.versionId = response.data.model.model_version.id;
                  if (sync) {
                    var timeStart = Date.now();
                    _this3._pollTrain.bind(_this3)(timeStart, resolve, reject);
                  } else {
                    resolve(new Model2(_this3._config, response.data.model));
                  }
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "_pollTrain",
        value: function _pollTrain(timeStart, resolve, reject) {
          var _this4 = this;
          clearTimeout(this.pollTimeout);
          if (Date.now() - timeStart >= SYNC_TIMEOUT) {
            return reject({
              status: "Error",
              message: "Sync call timed out"
            });
          }
          this.getOutputInfo().then(function(model) {
            var modelStatusCode = model.modelVersion.status.code.toString();
            if (modelStatusCode === MODEL_QUEUED_FOR_TRAINING || modelStatusCode === MODEL_TRAINING) {
              _this4.pollTimeout = setTimeout(function() {
                return _this4._pollTrain(timeStart, resolve, reject);
              }, POLLTIME);
            } else {
              resolve(model);
            }
          }, reject).catch(reject);
        }
      }, {
        key: "predict",
        value: function predict(inputs) {
          var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var isVideo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          if (checkType(/String/, config)) {
            console.warn("passing the language as a string is deprecated, consider using the configuration object instead");
            config = {
              language: config
            };
          }
          if (isVideo) {
            console.warn('"isVideo" argument is deprecated, consider using the configuration object instead');
            config.video = isVideo;
          }
          var video = config.video || false;
          delete config.video;
          if (checkType(/(Object|String)/, inputs)) {
            inputs = [inputs];
          }
          var url = "" + this._config.basePath + (this.versionId ? replaceVars(VERSION_PREDICT_PATH, [this.id, this.versionId]) : replaceVars(PREDICT_PATH, [this.id]));
          return wrapToken2(this._config, function(headers) {
            var params = { inputs: inputs.map(function(input) {
              return formatMediaPredict(input, video ? "video" : "image");
            }) };
            if (config && Object.getOwnPropertyNames(config).length > 0) {
              params["model"] = {
                output_info: {
                  output_config: formatObjectForSnakeCase(config)
                }
              };
            }
            return new Promise(function(resolve, reject) {
              axios.post(url, params, { headers }).then(function(response) {
                var data = clone(response.data);
                data.rawData = clone(response.data);
                resolve(data);
              }, reject);
            });
          });
        }
      }, {
        key: "getVersion",
        value: function getVersion(versionId) {
          var url = "" + this._config.basePath + replaceVars(MODEL_VERSION_PATH, [this.id, versionId]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                var data = clone(response.data);
                data.rawData = clone(response.data);
                resolve(data);
              }, reject);
            });
          });
        }
      }, {
        key: "getVersions",
        value: function getVersions() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + replaceVars(MODEL_VERSIONS_PATH, [this.id]);
          return wrapToken2(this._config, function(headers) {
            var data = {
              headers,
              params: { "per_page": options.perPage, "page": options.page }
            };
            return new Promise(function(resolve, reject) {
              axios.get(url, data).then(function(response) {
                var data2 = clone(response.data);
                data2.rawData = clone(response.data);
                resolve(data2);
              }, reject);
            });
          });
        }
      }, {
        key: "getOutputInfo",
        value: function getOutputInfo() {
          var _this5 = this;
          var url = "" + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_OUTPUT_PATH, [this.id, this.versionId]) : replaceVars(MODEL_OUTPUT_PATH, [this.id]));
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                resolve(new Model2(_this5._config, response.data.model));
              }, reject);
            });
          });
        }
      }, {
        key: "getInputs",
        value: function getInputs() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_INPUTS_PATH, [this.id, this.versionId]) : replaceVars(MODEL_INPUTS_PATH, [this.id]));
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, {
                params: { "per_page": options.perPage, "page": options.page },
                headers
              }).then(function(response) {
                var data = clone(response.data);
                data.rawData = clone(response.data);
                resolve(data);
              }, reject);
            });
          });
        }
      }, {
        key: "feedback",
        value: function feedback(input, _ref) {
          var id = _ref.id, data = _ref.data, info = _ref.info;
          var url = "" + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_FEEDBACK_PATH, [this.id, this.versionId]) : replaceVars(MODEL_FEEDBACK_PATH, [this.id]));
          var media = formatMediaPredict(input).data;
          info.eventType = "annotation";
          var body = {
            input: {
              id,
              data: Object.assign(media, data),
              "feedback_info": formatObjectForSnakeCase(info)
            }
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, body, {
                headers
              }).then(function(_ref2) {
                var data2 = _ref2.data;
                var d = clone(data2);
                d.rawData = clone(data2);
                resolve(d);
              }, reject);
            });
          });
        }
      }]);
      return Model2;
    }();
    module.exports = Model;
  }
});

// node_modules/clarifai/dist/Concept.js
var require_Concept = __commonJS({
  "node_modules/clarifai/dist/Concept.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Concept = function Concept2(_config, data) {
      _classCallCheck(this, Concept2);
      this.id = data.id;
      this.name = data.name;
      this.createdAt = data.created_at || data.createdAt;
      this.appId = data.app_id || data.appId;
      this.value = data.value || null;
      this._config = _config;
      this.rawData = data;
    };
    module.exports = Concept;
  }
});

// node_modules/clarifai/dist/Concepts.js
var require_Concepts = __commonJS({
  "node_modules/clarifai/dist/Concepts.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var Concept = require_Concept();
    var _require = require_constants();
    var API = _require.API;
    var replaceVars = _require.replaceVars;
    var CONCEPTS_PATH = API.CONCEPTS_PATH;
    var CONCEPT_PATH = API.CONCEPT_PATH;
    var CONCEPT_SEARCH_PATH = API.CONCEPT_SEARCH_PATH;
    var _require2 = require_utils2();
    var wrapToken2 = _require2.wrapToken;
    var formatConcept = _require2.formatConcept;
    var _require3 = require_helpers();
    var isSuccess2 = _require3.isSuccess;
    var checkType = _require3.checkType;
    var Concepts = function() {
      function Concepts2(_config) {
        var _this = this;
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Concepts2);
        this._config = _config;
        this.rawData = rawData;
        rawData.forEach(function(conceptData, index) {
          _this[index] = new Concept(_this._config, conceptData);
        });
        this.length = rawData.length;
      }
      _createClass(Concepts2, [{
        key: "list",
        value: function list() {
          var _this2 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + CONCEPTS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, {
                headers,
                params: {
                  "page": options.page,
                  "per_page": options.perPage
                }
              }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Concepts2(_this2._config, response.data.concepts));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "get",
        value: function get(id) {
          var _this3 = this;
          var url = "" + this._config.basePath + replaceVars(CONCEPT_PATH, [id]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Concept(_this3._config, response.data.concept));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "create",
        value: function create() {
          var _this4 = this;
          var concepts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          if (checkType(/(Object|String)/, concepts)) {
            concepts = [concepts];
          }
          var data = {
            "concepts": concepts.map(formatConcept)
          };
          var url = "" + this._config.basePath + CONCEPTS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Concepts2(_this4._config, response.data.concepts));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "search",
        value: function search(name) {
          var _this5 = this;
          var language = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var url = "" + this._config.basePath + CONCEPT_SEARCH_PATH;
          return wrapToken2(this._config, function(headers) {
            var params = {
              "concept_query": { name, language }
            };
            return new Promise(function(resolve, reject) {
              axios.post(url, params, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Concepts2(_this5._config, response.data.concepts));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "update",
        value: function update() {
          var _this6 = this;
          var concepts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var action = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "overwrite";
          if (!checkType(/Array/, concepts)) {
            concepts = [concepts];
          }
          var data = {
            concepts,
            action
          };
          var url = "" + this._config.basePath + CONCEPTS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.patch(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Concepts2(_this6._config, response.data.concepts));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }]);
      return Concepts2;
    }();
    module.exports = Concepts;
  }
});

// node_modules/clarifai/dist/Models.js
var require_Models = __commonJS({
  "node_modules/clarifai/dist/Models.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var Promise2 = require_promise();
    var Model = require_Model();
    var Concepts = require_Concepts();
    var _require = require_constants();
    var API = _require.API;
    var ERRORS = _require.ERRORS;
    var replaceVars = _require.replaceVars;
    var _require2 = require_helpers();
    var isSuccess2 = _require2.isSuccess;
    var checkType = _require2.checkType;
    var clone = _require2.clone;
    var _require3 = require_utils2();
    var wrapToken2 = _require3.wrapToken;
    var formatModel = _require3.formatModel;
    var MODELS_PATH = API.MODELS_PATH;
    var MODEL_PATH = API.MODEL_PATH;
    var MODEL_SEARCH_PATH = API.MODEL_SEARCH_PATH;
    var MODEL_VERSION_PATH = API.MODEL_VERSION_PATH;
    var Models = function() {
      function Models2(_config) {
        var _this = this;
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Models2);
        this._config = _config;
        this.rawData = rawData;
        rawData.forEach(function(modelData, index) {
          _this[index] = new Model(_this._config, modelData);
        });
        this.length = rawData.length;
      }
      _createClass(Models2, [{
        key: "initModel",
        value: function initModel(model) {
          var _this2 = this;
          var data = {};
          var fn = void 0;
          if (checkType(/String/, model)) {
            data.id = model;
          } else {
            data = model;
          }
          if (data.id) {
            fn = function fn2(resolve, reject) {
              resolve(new Model(_this2._config, data));
            };
          } else {
            fn = function fn2(resolve, reject) {
              _this2.search(data.name, data.type).then(function(models) {
                if (data.version) {
                  resolve(models.rawData.filter(function(model2) {
                    return model2.modelVersion.id === data.version;
                  }));
                } else {
                  resolve(models[0]);
                }
              }, reject).catch(reject);
            };
          }
          return new Promise2(fn);
        }
      }, {
        key: "predict",
        value: function predict(model, inputs) {
          var _this3 = this;
          var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (checkType(/Boolean/, config)) {
            console.warn('"isVideo" argument is deprecated, consider using the configuration object instead');
            config = {
              video: config
            };
          }
          if (model.language) {
            config.language = model.language;
          }
          return new Promise2(function(resolve, reject) {
            _this3.initModel(model).then(function(modelObj) {
              modelObj.predict(inputs, config).then(resolve, reject).catch(reject);
            }, reject);
          });
        }
      }, {
        key: "train",
        value: function train(model) {
          var _this4 = this;
          var sync = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          return new Promise2(function(resolve, reject) {
            _this4.initModel(model).then(function(model2) {
              model2.train(sync).then(resolve, reject).catch(reject);
            }, reject);
          });
        }
      }, {
        key: "feedback",
        value: function feedback(model, input, config) {
          var _this5 = this;
          return new Promise2(function(resolve, reject) {
            _this5.initModel(model).then(function(model2) {
              return model2.feedback(input, config);
            }).then(function(d) {
              return resolve(d);
            }).catch(function(e) {
              return reject(e);
            });
          });
        }
      }, {
        key: "getVersion",
        value: function getVersion(model, versionId) {
          var _this6 = this;
          return new Promise2(function(resolve, reject) {
            _this6.initModel(model).then(function(model2) {
              model2.getVersion(versionId).then(resolve, reject).catch(reject);
            }, reject);
          });
        }
      }, {
        key: "getVersions",
        value: function getVersions(model) {
          var _this7 = this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { page: 1, perPage: 20 };
          return new Promise2(function(resolve, reject) {
            _this7.initModel(model).then(function(model2) {
              model2.getVersions(options).then(resolve, reject).catch(reject);
            }, reject);
          });
        }
      }, {
        key: "getOutputInfo",
        value: function getOutputInfo(model) {
          var _this8 = this;
          return new Promise2(function(resolve, reject) {
            _this8.initModel(model).then(function(model2) {
              model2.getOutputInfo().then(resolve, reject).catch(reject);
            }, reject);
          });
        }
      }, {
        key: "list",
        value: function list() {
          var _this9 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + MODELS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise2(function(resolve, reject) {
              axios.get(url, {
                params: { "per_page": options.perPage, "page": options.page },
                headers
              }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Models2(_this9._config, response.data.models));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "create",
        value: function create(model) {
          var _this10 = this;
          var conceptsData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var concepts = conceptsData instanceof Concepts ? conceptsData.toObject("id") : conceptsData.map(function(concept) {
            var val = concept;
            if (checkType(/String/, concept)) {
              val = { "id": concept };
            }
            return val;
          });
          var modelObj = model;
          if (checkType(/String/, model)) {
            modelObj = { id: model, name: model };
          }
          if (modelObj.id === void 0) {
            throw ERRORS.paramsRequired("Model ID");
          }
          var url = "" + this._config.basePath + MODELS_PATH;
          var data = { model: modelObj };
          data["model"]["output_info"] = {
            "data": {
              concepts
            },
            "output_config": {
              "concepts_mutually_exclusive": !!options.conceptsMutuallyExclusive,
              "closed_environment": !!options.closedEnvironment
            }
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise2(function(resolve, reject) {
              axios.post(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Model(_this10._config, response.data.model));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "get",
        value: function get(id) {
          var _this11 = this;
          var url = "" + this._config.basePath + replaceVars(MODEL_PATH, [id]);
          return wrapToken2(this._config, function(headers) {
            return new Promise2(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Model(_this11._config, response.data.model));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "update",
        value: function update(models) {
          var _this12 = this;
          var url = "" + this._config.basePath + MODELS_PATH;
          var modelsList = Array.isArray(models) ? models : [models];
          var data = { models: modelsList.map(formatModel) };
          data["action"] = models.action || "merge";
          return wrapToken2(this._config, function(headers) {
            return new Promise2(function(resolve, reject) {
              axios.patch(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Models2(_this12._config, response.data.models));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "mergeConcepts",
        value: function mergeConcepts() {
          var model = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          model.action = "merge";
          return this.update(model);
        }
      }, {
        key: "deleteConcepts",
        value: function deleteConcepts() {
          var model = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          model.action = "remove";
          return this.update(model);
        }
      }, {
        key: "overwriteConcepts",
        value: function overwriteConcepts() {
          var model = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          model.action = "overwrite";
          return this.update(model);
        }
      }, {
        key: "delete",
        value: function _delete(ids) {
          var versionId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var request = void 0, url = void 0, data = void 0;
          var id = ids;
          if (checkType(/String/, ids) || checkType(/Array/, ids) && ids.length === 1) {
            if (versionId) {
              url = "" + this._config.basePath + replaceVars(MODEL_VERSION_PATH, [id, versionId]);
            } else {
              url = "" + this._config.basePath + replaceVars(MODEL_PATH, [id]);
            }
            request = wrapToken2(this._config, function(headers) {
              return new Promise2(function(resolve, reject) {
                axios.delete(url, { headers }).then(function(response) {
                  var data2 = clone(response.data);
                  data2.rawData = clone(response.data);
                  resolve(data2);
                }, reject);
              });
            });
          } else {
            if (!ids && !versionId) {
              url = "" + this._config.basePath + MODELS_PATH;
              data = { "delete_all": true };
            } else if (!versionId && ids.length > 1) {
              url = "" + this._config.basePath + MODELS_PATH;
              data = { ids };
            } else {
              throw ERRORS.INVALID_DELETE_ARGS;
            }
            request = wrapToken2(this._config, function(headers) {
              return new Promise2(function(resolve, reject) {
                axios({
                  method: "delete",
                  url,
                  data,
                  headers
                }).then(function(response) {
                  var data2 = clone(response.data);
                  data2.rawData = clone(response.data);
                  resolve(data2);
                }, reject);
              });
            });
          }
          return request;
        }
      }, {
        key: "search",
        value: function search(name) {
          var _this13 = this;
          var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var url = "" + this._config.basePath + MODEL_SEARCH_PATH;
          return wrapToken2(this._config, function(headers) {
            var params = {
              "model_query": {
                name,
                type
              }
            };
            return new Promise2(function(resolve, reject) {
              axios.post(url, params, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Models2(_this13._config, response.data.models));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }]);
      return Models2;
    }();
    module.exports = Models;
  }
});

// node_modules/clarifai/dist/Region.js
var require_Region = __commonJS({
  "node_modules/clarifai/dist/Region.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Region = function Region2(_config, data) {
      _classCallCheck(this, Region2);
      this.id = data.id;
      this.top = data.region_info.bounding_box.top_row;
      this.left = data.region_info.bounding_box.left_col;
      this.bottom = data.region_info.bounding_box.bottom_row;
      this.right = data.region_info.bounding_box.right_col;
    };
    module.exports = Region;
  }
});

// node_modules/clarifai/dist/Regions.js
var require_Regions = __commonJS({
  "node_modules/clarifai/dist/Regions.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Region = require_Region();
    var Regions = function() {
      function Regions2(_config) {
        var _this = this;
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Regions2);
        this._config = _config;
        this.rawData = rawData;
        rawData.forEach(function(regionData, index) {
          _this[index] = new Region(_this._config, regionData);
        });
        this.length = rawData.length;
      }
      _createClass(Regions2, [{
        key: Symbol.iterator,
        value: function value() {
          var _this2 = this;
          var index = -1;
          return {
            next: function next() {
              return { value: _this2[++index], done: index >= _this2.length };
            }
          };
        }
      }]);
      return Regions2;
    }();
    module.exports = Regions;
  }
});

// node_modules/clarifai/dist/Input.js
var require_Input = __commonJS({
  "node_modules/clarifai/dist/Input.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var Concepts = require_Concepts();
    var Regions = require_Regions();
    var _require = require_constants();
    var API = _require.API;
    var INPUTS_PATH = API.INPUTS_PATH;
    var Input = function() {
      function Input2(_config, data) {
        _classCallCheck(this, Input2);
        this.id = data.id;
        this.createdAt = data.created_at || data.createdAt;
        this.imageUrl = data.data.image.url;
        this.concepts = new Concepts(_config, data.data.concepts);
        this.regions = new Regions(_config, data.data.regions || []);
        this.score = data.score;
        this.metadata = data.data.metadata;
        if (data.data.geo && data.data.geo["geo_point"]) {
          this.geo = { geoPoint: data.data.geo["geo_point"] };
        }
        this.rawData = data;
        this._config = _config;
      }
      _createClass(Input2, [{
        key: "mergeConcepts",
        value: function mergeConcepts(concepts, metadata) {
          return this._update("merge", concepts, metadata);
        }
      }, {
        key: "deleteConcepts",
        value: function deleteConcepts(concepts, metadata) {
          return this._update("remove", concepts, metadata);
        }
      }, {
        key: "overwriteConcepts",
        value: function overwriteConcepts(concepts, metadata) {
          return this._update("overwrite", concepts, metadata);
        }
      }, {
        key: "_update",
        value: function _update(action) {
          var concepts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          var metadata = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          var url = "" + this._config.basePath + INPUTS_PATH;
          var inputData = {};
          if (concepts.length) {
            inputData.concepts = concepts;
          }
          if (metadata !== null) {
            inputData.metadata = metadata;
          }
          var data = {
            action,
            inputs: [{
              id: this.id,
              data: inputData
            }]
          };
          return wrapToken(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              return axios.patch(url, data, { headers }).then(function(response) {
                if (isSuccess(response)) {
                  resolve(new Input2(response.data.input));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }]);
      return Input2;
    }();
    module.exports = Input;
  }
});

// node_modules/clarifai/dist/Inputs.js
var require_Inputs = __commonJS({
  "node_modules/clarifai/dist/Inputs.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var Input = require_Input();
    var _require = require_constants();
    var API = _require.API;
    var ERRORS = _require.ERRORS;
    var MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE;
    var replaceVars = _require.replaceVars;
    var INPUT_PATH = API.INPUT_PATH;
    var INPUTS_PATH = API.INPUTS_PATH;
    var INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH;
    var SEARCH_PATH = API.SEARCH_PATH;
    var SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;
    var _require2 = require_utils2();
    var wrapToken2 = _require2.wrapToken;
    var formatInput = _require2.formatInput;
    var formatImagesSearch = _require2.formatImagesSearch;
    var formatConceptsSearch = _require2.formatConceptsSearch;
    var _require3 = require_helpers();
    var isSuccess2 = _require3.isSuccess;
    var checkType = _require3.checkType;
    var clone = _require3.clone;
    var Inputs = function() {
      function Inputs2(_config) {
        var _this = this;
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Inputs2);
        this.rawData = rawData;
        rawData.forEach(function(inputData, index) {
          if (inputData.input && inputData.score) {
            inputData.input.score = inputData.score;
            inputData = inputData.input;
          }
          _this[index] = new Input(_this._config, inputData);
        });
        this.length = rawData.length;
        this._config = _config;
      }
      _createClass(Inputs2, [{
        key: "list",
        value: function list() {
          var _this2 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + INPUTS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, {
                headers,
                params: {
                  page: options.page,
                  per_page: options.perPage
                }
              }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Inputs2(_this2._config, response.data.inputs));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "create",
        value: function create(inputs) {
          var _this3 = this;
          if (checkType(/(String|Object)/, inputs)) {
            inputs = [inputs];
          }
          var url = "" + this._config.basePath + INPUTS_PATH;
          if (inputs.length > MAX_BATCH_SIZE) {
            throw ERRORS.MAX_INPUTS;
          }
          return wrapToken2(this._config, function(headers) {
            var data = {
              inputs: inputs.map(formatInput)
            };
            return new Promise(function(resolve, reject) {
              axios.post(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Inputs2(_this3._config, response.data.inputs));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "get",
        value: function get(id) {
          var _this4 = this;
          var url = "" + this._config.basePath + replaceVars(INPUT_PATH, [id]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Input(_this4._config, response.data.input));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "delete",
        value: function _delete() {
          var id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          var val = void 0;
          if (checkType(/String/, id)) {
            var url = "" + this._config.basePath + replaceVars(INPUT_PATH, [id]);
            val = wrapToken2(this._config, function(headers) {
              return axios.delete(url, { headers });
            });
          } else {
            val = this._deleteInputs(id);
          }
          return val;
        }
      }, {
        key: "_deleteInputs",
        value: function _deleteInputs() {
          var id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          var url = "" + this._config.basePath + INPUTS_PATH;
          return wrapToken2(this._config, function(headers) {
            var data = id === null ? { delete_all: true } : { ids: id };
            return axios({
              url,
              method: "delete",
              headers,
              data
            });
          });
        }
      }, {
        key: "mergeConcepts",
        value: function mergeConcepts(inputs) {
          inputs.action = "merge";
          return this.update(inputs);
        }
      }, {
        key: "deleteConcepts",
        value: function deleteConcepts(inputs) {
          inputs.action = "remove";
          return this.update(inputs);
        }
      }, {
        key: "overwriteConcepts",
        value: function overwriteConcepts(inputs) {
          inputs.action = "overwrite";
          return this.update(inputs);
        }
      }, {
        key: "update",
        value: function update(inputs) {
          var _this5 = this;
          var url = "" + this._config.basePath + INPUTS_PATH;
          var inputsList = Array.isArray(inputs) ? inputs : [inputs];
          if (inputsList.length > MAX_BATCH_SIZE) {
            throw ERRORS.MAX_INPUTS;
          }
          var data = {
            action: inputs.action,
            inputs: inputsList.map(function(input) {
              return formatInput(input, false);
            })
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.patch(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Inputs2(_this5._config, response.data.inputs));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "search",
        value: function search() {
          var queries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { page: 1, perPage: 20 };
          var formattedAnds = [];
          var url = "" + this._config.basePath + SEARCH_PATH;
          var data = {
            query: {
              ands: []
            },
            pagination: {
              page: options.page,
              per_page: options.perPage
            }
          };
          if (!Array.isArray(queries)) {
            queries = [queries];
          }
          if (queries.length > 0) {
            queries.forEach(function(query) {
              if (query.input) {
                formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));
              } else if (query.concept) {
                formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));
              }
            });
            data.query.ands = formattedAnds;
          }
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, data, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  var _data = clone(response.data);
                  _data.rawData = clone(response.data);
                  resolve(_data);
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "searchFeedback",
        value: function searchFeedback(inputID, searchID, endUserID, sessionID) {
          var url = "" + this._config.basePath + SEARCH_FEEDBACK_PATH;
          var body = {
            input: {
              id: inputID,
              feedback_info: {
                event_type: "search_click",
                search_id: searchID,
                end_user_id: endUserID,
                session_id: sessionID
              }
            }
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, body, {
                headers
              }).then(function(_ref) {
                var data = _ref.data;
                var d = clone(data);
                d.rawData = clone(data);
                resolve(d);
              }, reject);
            });
          });
        }
      }, {
        key: "getStatus",
        value: function getStatus() {
          var url = "" + this._config.basePath + INPUTS_STATUS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  var data = clone(response.data);
                  data.rawData = clone(response.data);
                  resolve(data);
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }]);
      return Inputs2;
    }();
    module.exports = Inputs;
  }
});

// node_modules/clarifai/dist/Workflow.js
var require_Workflow = __commonJS({
  "node_modules/clarifai/dist/Workflow.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _utils = require_utils2();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var _require = require_constants();
    var API = _require.API;
    var replaceVars = _require.replaceVars;
    var WORKFLOWS_PATH = API.WORKFLOWS_PATH;
    var WORKFLOW_PATH = API.WORKFLOW_PATH;
    var WORKFLOW_RESULTS_PATH = API.WORKFLOW_RESULTS_PATH;
    var _require2 = require_utils2();
    var wrapToken2 = _require2.wrapToken;
    var formatInput = _require2.formatInput;
    var _require3 = require_helpers();
    var checkType = _require3.checkType;
    var Workflow = function() {
      function Workflow2(_config) {
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Workflow2);
        this._config = _config;
        this.rawData = rawData;
        this.id = rawData.id;
        this.createdAt = rawData.created_at || rawData.createdAt;
        this.appId = rawData.app_id || rawData.appId;
      }
      _createClass(Workflow2, [{
        key: "create",
        value: function create(workflowId, config) {
          var url = "" + this._config.basePath + WORKFLOWS_PATH;
          var modelId = config.modelId;
          var modelVersionId = config.modelVersionId;
          var body = {
            workflows: [{
              id: workflowId,
              nodes: [{
                id: "concepts",
                model: {
                  id: modelId,
                  model_version: {
                    id: modelVersionId
                  }
                }
              }]
            }]
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, body, {
                headers
              }).then(function(response) {
                var workflowId2 = response.data.workflows[0].id;
                resolve(workflowId2);
              }, reject);
            });
          });
        }
      }, {
        key: "delete",
        value: function _delete(workflowId, config) {
          var url = "" + this._config.basePath + replaceVars(WORKFLOW_PATH, [workflowId]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.delete(url, {
                headers
              }).then(function(response) {
                var data = response.data;
                resolve(data);
              }, reject);
            });
          });
        }
      }, {
        key: "predict",
        value: function predict(workflowId, inputs) {
          var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var url = "" + this._config.basePath + replaceVars(WORKFLOW_RESULTS_PATH, [workflowId]);
          if (checkType(/(Object|String)/, inputs)) {
            inputs = [inputs];
          }
          return wrapToken2(this._config, function(headers) {
            var params = {
              inputs: inputs.map(formatInput)
            };
            if (config && Object.getOwnPropertyNames(config).length > 0) {
              params["output_config"] = (0, _utils.formatObjectForSnakeCase)(config);
            }
            return new Promise(function(resolve, reject) {
              axios.post(url, params, {
                headers
              }).then(function(response) {
                var data = response.data;
                resolve(data);
              }, reject);
            });
          });
        }
      }]);
      return Workflow2;
    }();
    module.exports = Workflow;
  }
});

// node_modules/clarifai/dist/Workflows.js
var require_Workflows = __commonJS({
  "node_modules/clarifai/dist/Workflows.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var Workflow = require_Workflow();
    var _require = require_constants();
    var API = _require.API;
    var replaceVars = _require.replaceVars;
    var WORKFLOWS_PATH = API.WORKFLOWS_PATH;
    var WORKFLOW_PATH = API.WORKFLOW_PATH;
    var _require2 = require_utils2();
    var wrapToken2 = _require2.wrapToken;
    var _require3 = require_helpers();
    var isSuccess2 = _require3.isSuccess;
    var Workflows = function() {
      function Workflows2(_config) {
        var _this = this;
        var rawData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        _classCallCheck(this, Workflows2);
        this._config = _config;
        this.rawData = rawData;
        rawData.forEach(function(workflowData, index) {
          _this[index] = new Workflow(_this._config, workflowData);
        });
        this.length = rawData.length;
      }
      _createClass(Workflows2, [{
        key: "list",
        value: function list() {
          var _this2 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : { page: 1, perPage: 20 };
          var url = "" + this._config.basePath + WORKFLOWS_PATH;
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.get(url, {
                headers,
                params: {
                  page: options.page,
                  per_page: options.perPage
                }
              }).then(function(response) {
                if (isSuccess2(response)) {
                  resolve(new Workflows2(_this2._config, response.data.workflows));
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "create",
        value: function create(workflowId, config) {
          var url = "" + this._config.basePath + WORKFLOWS_PATH;
          var modelId = config.modelId;
          var modelVersionId = config.modelVersionId;
          var body = {
            workflows: [{
              id: workflowId,
              nodes: [{
                id: "concepts",
                model: {
                  id: modelId,
                  model_version: {
                    id: modelVersionId
                  }
                }
              }]
            }]
          };
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.post(url, body, {
                headers
              }).then(function(response) {
                var workflowId2 = response.data.workflows[0].id;
                resolve(workflowId2);
              }, reject);
            });
          });
        }
      }, {
        key: "delete",
        value: function _delete(workflowId) {
          var url = "" + this._config.basePath + replaceVars(WORKFLOW_PATH, [workflowId]);
          return wrapToken2(this._config, function(headers) {
            return new Promise(function(resolve, reject) {
              axios.delete(url, {
                headers
              }).then(function(response) {
                var data = response.data;
                resolve(data);
              }, reject);
            });
          });
        }
      }]);
      return Workflows2;
    }();
    module.exports = Workflows;
  }
});

// node_modules/clarifai/dist/solutions/Moderation.js
var require_Moderation = __commonJS({
  "node_modules/clarifai/dist/solutions/Moderation.js"(exports, module) {
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var _require = require_utils2();
    var wrapToken2 = _require.wrapToken;
    var _require2 = require_helpers();
    var isSuccess2 = _require2.isSuccess;
    var clone = _require2.clone;
    var BASE_URL = "https://api.clarifai-moderation.com";
    var Moderation = function() {
      function Moderation2(_config) {
        _classCallCheck(this, Moderation2);
        this._config = _config;
      }
      _createClass(Moderation2, [{
        key: "predict",
        value: function predict(modelID, imageURL) {
          return wrapToken2(this._config, function(headers) {
            var url = BASE_URL + "/v2/models/" + modelID + "/outputs";
            var params = {
              inputs: [{
                data: {
                  image: {
                    url: imageURL
                  }
                }
              }]
            };
            return new Promise(function(resolve, reject) {
              return axios.post(url, params, { headers }).then(function(response) {
                if (isSuccess2(response)) {
                  var data = clone(response.data);
                  resolve(data);
                } else {
                  reject(response);
                }
              }, reject);
            });
          });
        }
      }, {
        key: "getModerationStatus",
        value: function getModerationStatus(imageID) {
          return wrapToken2(this._config, function(headers) {
            var url = BASE_URL + "/v2/inputs/" + imageID + "/outputs";
            return new Promise(function(resolve, reject) {
              return axios.get(url, { headers }).then(function(response) {
                var data = clone(response.data);
                resolve(data);
              }, reject);
            });
          });
        }
      }]);
      return Moderation2;
    }();
    module.exports = Moderation;
  }
});

// node_modules/clarifai/dist/solutions/Solutions.js
var require_Solutions = __commonJS({
  "node_modules/clarifai/dist/solutions/Solutions.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Moderation = require_Moderation();
    var Solutions = function Solutions2(_config) {
      _classCallCheck(this, Solutions2);
      this.moderation = new Moderation(_config);
    };
    module.exports = Solutions;
  }
});

// node_modules/clarifai/dist/App.js
var require_App = __commonJS({
  "node_modules/clarifai/dist/App.js"(exports, module) {
    "use strict";
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var axios = require_axios2();
    var _require = require_helpers();
    var checkType = _require.checkType;
    var Models = require_Models();
    var Inputs = require_Inputs();
    var Concepts = require_Concepts();
    var Workflow = require_Workflow();
    var Workflows = require_Workflows();
    var Solutions = require_Solutions();
    var _require2 = require_constants();
    var API = _require2.API;
    var ERRORS = _require2.ERRORS;
    var getBasePath = _require2.getBasePath;
    var TOKEN_PATH = API.TOKEN_PATH;
    if (typeof window !== "undefined" && !("Promise" in window)) {
      window.Promise = require_promise();
    }
    if (typeof global !== "undefined" && !("Promise" in global)) {
      global.Promise = require_promise();
    }
    var App = function() {
      function App2(arg1, arg2, arg3) {
        _classCallCheck(this, App2);
        var optionsObj = arg1;
        if ((typeof arg1 === "undefined" ? "undefined" : _typeof(arg1)) !== "object" || arg1 === null) {
          optionsObj = arg3 || {};
          optionsObj.clientId = arg1;
          optionsObj.clientSecret = arg2;
        }
        this._validate(optionsObj);
        this._init(optionsObj);
      }
      _createClass(App2, [{
        key: "getToken",
        value: function getToken() {
          return this._config.token();
        }
      }, {
        key: "setToken",
        value: function setToken(_token) {
          var token = _token;
          var now = new Date().getTime();
          if (typeof _token === "string") {
            token = {
              accessToken: _token,
              expiresIn: 176400
            };
          } else {
            token = {
              accessToken: _token.access_token || _token.accessToken,
              expiresIn: _token.expires_in || _token.expiresIn
            };
          }
          if (token.accessToken && token.expiresIn || token.access_token && token.expires_in) {
            if (!token.expireTime) {
              token.expireTime = now + token.expiresIn * 1e3;
            }
            this._config._token = token;
            return true;
          }
          return false;
        }
      }, {
        key: "_validate",
        value: function _validate(_ref) {
          var clientId = _ref.clientId, clientSecret = _ref.clientSecret, token = _ref.token, apiKey = _ref.apiKey, sessionToken = _ref.sessionToken;
          if (clientId || clientSecret) {
            console.warn("Client ID/secret has been deprecated. Please switch to using the API key. See here how to do the switch: https://blog.clarifai.com/introducing-api-keys-a-safer-way-to-authenticate-your-applications");
          }
          if ((!clientId || !clientSecret) && !token && !apiKey && !sessionToken) {
            throw ERRORS.paramsRequired(["apiKey"]);
          }
        }
      }, {
        key: "_init",
        value: function _init(options) {
          var _this = this;
          var apiEndpoint = options.apiEndpoint || process && process.env && process.env.API_ENDPOINT || "https://api.clarifai.com";
          this._config = {
            apiEndpoint,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            apiKey: options.apiKey,
            sessionToken: options.sessionToken,
            basePath: getBasePath(apiEndpoint, options.userId, options.appId),
            token: function token() {
              return new Promise(function(resolve, reject) {
                var now = new Date().getTime();
                if (checkType(/Object/, _this._config._token) && _this._config._token.expireTime > now) {
                  resolve(_this._config._token);
                } else {
                  _this._getToken(resolve, reject);
                }
              });
            }
          };
          if (options.token) {
            this.setToken(options.token);
          }
          this.models = new Models(this._config);
          this.inputs = new Inputs(this._config);
          this.concepts = new Concepts(this._config);
          this.workflow = new Workflow(this._config);
          this.workflows = new Workflows(this._config);
          this.solutions = new Solutions(this._config);
        }
      }, {
        key: "_getToken",
        value: function _getToken(resolve, reject) {
          var _this2 = this;
          this._requestToken().then(function(response) {
            if (response.status === 200) {
              _this2.setToken(response.data);
              resolve(_this2._config._token);
            } else {
              reject(response);
            }
          }, reject);
        }
      }, {
        key: "_requestToken",
        value: function _requestToken() {
          var url = "" + this._config.basePath + TOKEN_PATH;
          var clientId = this._config.clientId;
          var clientSecret = this._config.clientSecret;
          return axios({
            "url": url,
            "method": "POST",
            "auth": {
              "username": clientId,
              "password": clientSecret
            }
          });
        }
      }]);
      return App2;
    }();
    module.exports = App;
  }
});

// node_modules/clarifai/dist/index.js
var require_dist = __commonJS({
  "node_modules/clarifai/dist/index.js"(exports, module) {
    "use strict";
    var App = require_App();
    var _require = require_package();
    var version = _require.version;
    module.exports = global.Clarifai = {
      version,
      App,
      GENERAL_MODEL: "aaa03c23b3724a16a56b629203edc62c",
      FOOD_MODEL: "bd367be194cf45149e75f01d59f77ba7",
      TRAVEL_MODEL: "eee28c313d69466f836ab83287a54ed9",
      NSFW_MODEL: "e9576d86d2004ed1a38ba0cf39ecb4b1",
      WEDDINGS_MODEL: "c386b7a870114f4a87477c0824499348",
      WEDDING_MODEL: "c386b7a870114f4a87477c0824499348",
      COLOR_MODEL: "eeed0b6733a644cea07cf4c60f87ebb7",
      CLUSTER_MODEL: "cccbe437d6e54e2bb911c6aa292fb072",
      FACE_DETECT_MODEL: "a403429f2ddf4b49b307e318f00e528b",
      FOCUS_MODEL: "c2cf7cecd8a6427da375b9f35fcd2381",
      LOGO_MODEL: "c443119bf2ed4da98487520d01a0b1e3",
      DEMOGRAPHICS_MODEL: "c0c0ac362b03416da06ab3fa36fb58e3",
      GENERAL_EMBED_MODEL: "bbb5f41425b8468d9b7a554ff10f8581",
      FACE_EMBED_MODEL: "d02b4508df58432fbb84e800597b8959",
      APPAREL_MODEL: "e0be3b9d6a454f0493ac3a30784001ff",
      MODERATION_MODEL: "d16f390eb32cad478c7ae150069bd2c6",
      TEXTURES_AND_PATTERNS: "fbefb47f9fdb410e8ce14f24f54b47ff",
      LANDSCAPE_QUALITY: "bec14810deb94c40a05f1f0eb3c91403",
      PORTRAIT_QUALITY: "de9bd05cfdbf4534af151beb2a5d0953",
      CELEBRITY_MODEL: "e466caa0619f444ab97497640cefc4dc"
    };
  }
});

// dep:clarifai
var clarifai_default = require_dist();
export {
  clarifai_default as default
};
//# sourceMappingURL=clarifai.js.map
